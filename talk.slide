Managing EC2 servers with Ansible
20 May, 2014

Lorin Hochstein
Lead Software Engineer, SendGrid
lorin.hochstein@sendgrid.com
@lhochstein

* 


#
# Managing EC2 servers by hand is a pain
#


# - Random example: you need to do a security update because there’s a
#   bug in an SSL library
# - You don’t want to ssh to individual machines for maintenance
#     - If you have more than one server, you’ll likely make them
#       inconsistent
#     - It doesn’t scale
#     - It’s not a good use of your time
#     * Lots of automation tools out there to eliminate this pain

# - Our roadmap
#     - Today I’m talking about one such tool, Ansible
#     - Also makes life simpler if you use the same tool for deployment
#       as for server management
#           Maybe zap this from here
#     - Focus today is on using Ansible with EC2

.image ssh.png

* 

#
# Ansible basic explanation
#

# Say you had to do a security update on Ubuntu

    $ ssh myserver
    $ sudo apt-get update
    $ sudo apt-get dist-upgrade


* 
# Here's how you would do it in ansible
# You'd write a playbook

.code security-update.yml

* 

# The magic comes from the apt module
.image apt.png

* 

# - Then you’d run it
# - What just happened?
# - First, Ansible had to figure out which hosts it was going to interact
#   with
# - Then it ssh’d to each one, copied over some Python scripts, and ran
#   them
# - Each task ran in parallel across the machines
# - But each task has to finish before it moves onto the next one
# - We can get fancier and check for reboot
# - We can also run them serially so we don’t reboot all our servers at
#   once


    $ ansible-playbook security-update.yml
    <TODO: show output here>


* 
# - Here’s a more complex example: Installing New Relic server monitoring
#   agent
#
# - We have multiple tasks, and we even have a variable.
# - We can do more templating, conditions, but that's not what I'd like to talk
# about today

.code new-relic.yml

* 

# Here's something you run into pretty quickly
# Ansible needs to know where your hosts are

    $ ansible-playbook new-relic.yml

    PLAY [Configure server to monitor with New Relic] ***************************** 
    skipping: no hosts matched

    PLAY RECAP ******************************************************************** 

* 

# The simplest inventory file

Inventory file:

.code inventory-simple

Playbook:

    - name: My playbook
      hosts: mail.example.com
      tasks:
        ...

* 

# We can also define groups

Inventory file:

.code inventory-with-groups

Playbook:

    - name: My playbook
      hosts: webservers
      tasks:
        ...

* 

# We can even define groups of groups

Inventory file:

.code inventory-groups-of-groups

Playbook:

    - name: My playbook
      hosts: appservers
      tasks:
        ...

# This isn't a good way to deal with EC2 instances

* 

# If an inventory file is executable, ansible will
# run it instead of examining it


    chmod +x ./my-inventory-file

* 

    $ ./my-inventory-file --list

    {
      ...,
      "webservers": [
        "foo.example.com",
        "bar.example.com"
     ],
      "dbservers" : [
        "one.example.com",
        "two.example.com",
        "three.example.com"
     ],
    ...
    }

# The script has to respond to a --list to list all host and groups

* 

    $ ./ec2.py
    ...
    "i-3f4e42f6": [
      "ec2-107-33-214-218.compute-1.amazonaws.com"
    ],
    "i-b699a7ge": [
      "ec2-104-236-90-9.compute-1.amazonaws.com"
    ],
    "i-3g03c3cf": [
      "ec2-43-73-7-13.compute-1.amazonaws.com"
    ],
    ...

Playbook:

    - name: My playbook
      hosts: i-3f4e42f6
      tasks:
        ...
# Ansible comes with a executable script called ec2.py.
# A couple of interesting things about this
# First off, it creates groups for instance ids

* 

  $ ./ec2.py
  ...
  "ec2": [
    "ec2-75-220-111-180.compute-1.amazonaws.com",
    "ec2-251-154-39-73.compute-1.amazonaws.com",
    "ec2-253-205-226-239.compute-1.amazonaws.com",
    "ec2-209-44-103-72.compute-1.amazonaws.com",
    "ec2-152-163-165-105.compute-1.amazonaws.com",
    ...
  ],
  "us-east-1": [
    "ec2-75-220-111-180.compute-1.amazonaws.com",
    "ec2-221-127-195-183.compute-1.amazonaws.com",
    "ec2-154-119-217-140.compute-1.amazonaws.com",
    ...
  ],
  "us-east-1b": [
    "ec2-75-220-111-180.compute-1.amazonaws.com",
    "ec2-189-19-204-147.compute-1.amazonaws.com",
    "ec2-165-131-196-230.compute-1.amazonaws.com",

* 

    $ ./ec2.py
    ...
    "key_mykeyname": [
      "ec2-19-245-71-94.compute-1.amazonaws.com",
      "ec2-41-205-182-83.compute-1.amazonaws.com",
      "ec2-19-78-31-83.compute-1.amazonaws.com",
      "ec2-249-124-225-162.compute-1.amazonaws.com",
    ...


* 


    $ ./ec2.py
    ...
    "security_group_ping": [
      "ec2-2-105-138-45.compute-1.amazonaws.com",
      "ec2-75-13-134-174.compute-1.amazonaws.com",
      "ec2-74-228-102-169.compute-1.amazonaws.com"
    ],
    "security_group_ssh": [
      "ec2-89-161-251-117.compute-1.amazonaws.com",
      "ec2-108-80-99-148.compute-1.amazonaws.com",
      "ec2-160-220-184-229.compute-1.amazonaws.com"
    ],
    ...


* Facts about individual instances

* Using the EC2 module for starting instances


* How do I speed up management inside EC2?

Don’t try to manage a fleet of EC2 machines from your laptop.
Connect to a management node inside EC2 first and run Ansible from there.

.link http://docs.ansible.com/faq.html#how-do-i-speed-up-management-inside-ec2



* Packer for AMIs
